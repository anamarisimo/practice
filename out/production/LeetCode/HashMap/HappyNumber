Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false


Constraints:

1 <= n <= 231 - 1

--------------------------------------------

Intuition

A good way to get started with a question like this is to make a couple of examples.
Let's start with the number 7. The next number will be 49, and then the next after that will be 97(as 4^2 + 9^2 = 97)
We can continually repeat the process of squaring and then adding the digits until we get to 1.
Because we got to 1, we know that 7 is a happy number, and the function should return true.

As another example, let's start with 116.
By repeatedly applying the squaring and adding process, we eventually get to 58, and then a bit after that,
we get back to 58. Because we are back at a number we've already seen, we know there is a cycle, and therefore
it is impossible to ever reach 1. So for 116, the function should return false.

Based on our exploration so far, we'd expect continually following links to end in one of three ways.

It eventually gets to 1.
It eventually gets stuck in a cycle.
It keeps going higher and higher, up towards infinity.

That 3rd option sounds really annoying to detect and handle. How would we even know that it is going to continue going up,
rather than eventually going back down, possibly to 1?
Luckily, it turns out we don't need to worry about it. Think carefully about what the largest next number we could get for each number
of digits is.

Digits	Largest	           Next
1	    9	               81
2	    99	               162
3	    999	               243
4	    9999	           324
13	    9999999999999	   1053

For a number with 3 digits, it's impossible for it to ever go larger than 243.
This means it will have to either get stuck in a cycle below 243 or go down to 1.
Numbers with 4 or more digits will always lose a digit at each step until they are down to 3 digits.
So we know that at worst, the algorithm might cycle around all the numbers under 243 and then go back to one it's already been to
(a cycle) or go to 11. But it won't go on indefinitely, allowing us to rule out the 3rd option.

Algorithm

There are 2 parts to the algorithm we'll need to design and code.

Given a number nn, what is its next number?
Follow a chain of numbers and detect if we've entered a cycle.
Part 1 can be done by using the division and modulus operators to repeatedly take digits off the number until
none remain, and then squaring each removed digit and adding them together. Have a careful look at the code for this,
"picking digits off one-by-one" is a useful technique you'll use for solving a lot of different problems.

Part 2 can be done using a HashSet. Each time we generate the next number in the chain, we check if it's already in our HashSet.

If it is not in the HashSet, we should add it.
If it is in the HashSet, that means we're in a cycle and so should return false.

Complexity Analysis

Finding the next value for a given number has a cost of O(log n) because we are processing each digit in the number,
and the number of digits in a number is given by log n.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 A number with d digits is between 10^(d-1) inclusive and 10^d exclusive.
 In other words, let d be the number of digits in N, and we have the inequalities 10^(d-1) <= N < 10^d.
 Taking a logarithm, we have d-1 <= log(N) < d. (We can maintain the inequalities because logarithms are monotonic.)
 Adding 1 to the left inequality gives d <= log(N) + 1, and combining with the previous result,
 we have log(N) < d <= log(N) + 1. That is, we've upper-bounded and lower-bounded the number of digits d by terms that are O(log(N))
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.

We determined above that once a number is below 243, it is impossible for it to go back up above 243.
Therefore, based on our very shallow analysis we know for sure that once a number is below 243,
 it is impossible for it to take more than another 243 steps to terminate. Each of these numbers has at most 3 digits.
 With a little more analysis, we could replace the 243 with the length of the longest number chain below 243,
 however because the constant doesn't matter anyway, we won't worry about it.

For an n above 243, we need to consider the cost of each number in the chain that is above 243.
With a little math, we can show that in the worst case, these costs will be O(log n) + O(log log n) + O(log log log n)...
Luckily for us, the O(log n) is the dominating part, and the others are all tiny in comparison (collectively, they add up to less than log n),
so we can ignore them.

Time complexity : O(243  + log n + log log n + log log log n)... = O(log n).
