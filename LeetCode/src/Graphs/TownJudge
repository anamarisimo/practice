In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.

Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.



Example 1:

Input: n = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: n = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: n = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1


Constraints:

1 <= n <= 1000
0 <= trust.length <= 104
trust[i].length == 2
All the pairs of trust are unique.
ai != bi
1 <= ai, bi <= n

---------------------------------------------------
Solution

Some people would be tempted to launch straight into converting the input into a standard graph format,
for example an adjacency list (or worse, a complicated linked structure), as soon as they make the observation that this has
something to do with graphs. Then, they'll go back to trying to solve the actual problem. But as we'll see, it's better to start
by looking really closely at the problem, as there's a way we can solve it without making a graph.

In graph theory, we say the outdegree of a vertex (person) is the number of directed edges going out of it.
For this graph, the outdegree of the vertex represents the number of other people that person trusts.
Likewise, we say that the indegree of a vertex (person) is the number of directed edges going into it.
So here, it represents the number of people trusted by that person.

We can define the town judge in terms of indegree and outdegree.

The town judge has an outdegree of 0 and an indegree of N - 1 because they trust nobody, and everybody trusts them (except themselves).
Therefore, this problem simplifies to calculating the indegree and outdegree for each person and then checking whether or not any
of them meet the criteria of the town judge.

We can calculate the indegrees and outdegrees for everybody, using a single loop over the input trust array.

---------------------------------------------------

Complexity Analysis

Let N be the number of people, and E be the number of edges (trust relationships).

Time Complexity : O(E).

We loop over the trust list once. The cost of doing this is O(E).
We then loop over the people. The cost of doing this is O(N).

Going by this, it now looks this is one those many graph problems where the cost is O(max(N, E)) = O(N + E).
After all, we don't know whether E or N is the bigger one, right?

However, remember how we terminate early if E < N−1? This means that in the best case, the time complexity is O(1).
And in the worst case, we know that E ≥ N - 1. For the purpose of big-oh notation, we ignore the constant of 1.
Therefore, in the worst case, E has to be bigger, and so we can simply drop the N, leaving O(E).

Space Complexity : O(N).

We allocated 2 arrays; one for the indegrees and the other for the outdegrees.
Each was of length N + 1. Because in big-oh notation we drop constants, this leaves us with O(N).

-----------------------------------------

Bonus
Can There Be More Than One Town Judge?

In the problem description, we're told that iff there is a town judge, there'll only be one town judge.

It's likely that not all interviewers would tell you directly that there can only be one town judge.
If you asked them whether or not there could be more than one town judge, they might ask you if there could be.
And the answer is... it's impossible!

If there were two town judges, then they would have to trust each other, otherwise we'd have a town judge not trusted by everybody.
But this doesn't work, because town judges aren't supposed to trust anybody. Therefore, we know there can be at most one town judge.
